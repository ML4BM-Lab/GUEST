Metadata-Version: 2.1
Name: graphguest
Version: 1.3.0
Summary: Graph Universal Embedding Splitting Tool
Author-email: Jesús de la Fuente Cedeño <jdlfuentec@gmail.com>
License: MIT License
        
        Copyright (c) [2022] [ubioinformat]
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/ubioinformat/guest
Keywords: graph embedding,pypi,drug repurposing,splitting,graph embedding splitting
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Operating System :: OS Independent
Requires-Python: >=3
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

# Graph Universal Embedding Splitting Tool (GUEST)

## Description

This is a package for evaluating Graph Embedding prediction methodologies. GraphGuest works on any kind of heterogeneous undirected graphs with exact 2 types of nodes and 1 type of edge. It was developed in the context of drug repurposing, as a part of the paper "Towards a more inductive world for drug repurposing approaches". From now on, we will refer to the nodes type 1 and 2 as Drugs and Proteins, respectively, hence the evaluated graph would be a Drug Target Interaction (DTI) network.

### GraphGuest splitting functionality

GraphGuest allows to split any chosen network into train/test following several criteria: 
- **Random**: There is no constraint imposed, DTIs are distributed across train and test randomly.
- **Sp**: Related to pairs. Any drug or protein may appear both in the train and test set, but interactions cannot be duplicated in the two sets.
- **Sd**: Related to drug nodes. Drug nodes are not duplicated in the train and test set, i.e., a node evaluated during training does not appear in the test set. 
- **St**: Related to targets. Protein nodes are not duplicated in the train and test set, each protein seen during training does not appear in the test set. 


<p align="center" width="100%">
    <img width="50%" src="imgs/Splitting.PNG">
</p>

### GraphGuest subsampling functionality

Generally DTI networks are highly sparse, i.e., there is a high number of negative interactions compared to the positive ones. Hence, including all negative edges is not feasible, 
and would bias the model towards negative predictions. Accordingly, usually a balanced dataset is built by selecting all the positive interactions 
and subsampling the same number (negative to positive ratio of 1) of negatives randomly. In the presented work, we showed that random subsampling can oversimplify the 
prediction task, as it is likely that the model is not evaluated on hard-to-classify negative samples. Also, this subsampling methodology lacks of biological meaning.
Hence, we proposed to weight negative interactions based on a structural-based metric (RMSD of the distance between atoms of two protein structures) to find hard-to-classify
samples and increase accuracy and robustness of the drug repurposing model.

In this line, GraphGuest allows to use a matrix of distances/scores between every Protein as an alternative to random subsampling. If this matrix is provided, for each positive DTI,
the negative DTI will be formed by the same drug and the protein that better maximizes (or minimizes) the distance/score with respect to the original protein from the positive DTI.

<p align="center" width="100%">
    <img width="50%" src="imgs/RMSD.PNG">
</p>

## How to use it

Here now we describe the functionalities and parameters of the GraphGuest GUEST class:
- **DTIs**: Interaction list in the form of a pandas matrix with the columns "Drug" and "Protein" as the type 1 and 2 nodes.
- **mode**: The already introduced split criteria: random, Sp, Sd or St. (default: Sp)
- **subsampling**: Whether all interactions are chosen to build the dataset or subsampling is preferred instead. (default: True)
- **n_seeds**: Number of times the dataset will be built, varying the seed, hence yielding different splits. (default: 5)
- **foldnum**: For each seed, number of folds in which the data will be splitted. (default: 10)
- **negative_to_positive_ratio**: How many negatives DTI will be subsampled respect to the positives ones.  (default: 1)


First, load your DTI network. It must be a pandas matrix containing the columns "Drug" and "Protein". An example is located in the test folder (nr_dti.txt).

    DTIs = pd.read_csv("tests/nr_dti.txt", sep='\t', header=None) 
    DTIs.columns = ['Drug', 'Protein']

Then, load the GUEST object, specifying the mode
you want the dataset to fulfill, subsampling options, number of seeds, number of folds, etc. See help for more information.

    GUESTobj = GUEST(DTIs, mode = "Sp", subsampling = True, n_seeds = 5, foldnum = 10)

Optionally, you can apply a certain matrix for (DESCRIBE)

    #Apply RMSD
    GUESTobj.apply_RMSD(fpath = '.../RMSD_full_matrix.pkl')

Now, generate the splits according to the specified options. Here, two different functions can be called:

    #Generate splits 
    GUESTobj.generate_splits_cv() #(Cross-Validation)
    GUESTobj.generate_splits_tvt() #(Train-Validation-Test)

Finally, retrieve the results. If RMSD option has been applied, 
a extra dictionary (prot_info_dict) with info will be returned ...(FINISH)

    #Retrieve results
    seed_cv_list  = GUESTobj.retrieve_results() #(Default)
    seed_cv_list, prot_info_dict = GUESTobj.retrieve_results() #(RMSD applied)

You can verify that your splits fulfill the mode requirements after they have been generated.

    #Test your splits
    GUESTobj.test_splits()
    
